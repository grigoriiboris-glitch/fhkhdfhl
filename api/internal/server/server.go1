// package server

// import (
// 	"log"
// 	"net/http"

// 	"github.com/jackc/pgx/v5/pgxpool"
// 	"github.com/mymindmap/api/auth"
// 	"github.com/mymindmap/api/internal/handlers"
// 	"github.com/mymindmap/api/internal/config"
// 	"github.com/mymindmap/api/repository"
// )

// type Server struct {
// 	http.Server
// }

// func New(cfg *config.Config, dbpool *pgxpool.Pool, log *log.Logger) *Server {
// 	postRepo := repository.NewPostRepository(dbpool)
// 	userRepo := repository.NewUserRepository(dbpool)
// 	mindMapRepo := repository.NewMindMapRepository(dbpool)

// 	// Create auth config (for now with defaults, later from env)
// 	authConfig := &auth.Config{
// 		EnableRateLimit: true,
// 	}
	
// 	authService, err := auth.NewAuthService(userRepo, authConfig)
// 	if err != nil {
// 		log.Fatal("unable to init auth service:", err)
// 	}

// 	mux := http.NewServeMux()

// 	// auth routes
// 	authHandler := handlers.NewAuthHandler(authService, userRepo, log)
// 	authHandler.RegisterRoutes(mux)

// 	// post routes
// 	postHandler := handlers.NewPostHandler(postRepo, authService, log)
// 	postHandler.RegisterRoutes(mux)d

// 	// mindmap routes
// 	mindMapHandler := handlers.NewMindMapHandler(mindMapRepo, authService, log)
// 	mindMapHandler.RegisterRoutes(mux)

// 	return &Server{
// 		Server: http.Server{
// 			Addr:    ":" + cfg.Port,
// 			Handler: mux,
// 		},
// 	}
// }
