package {{ .VarName }}_service

import (
	"context"
	"{{ .Module }}/internal/http/requests/{{ .VarName }}"
	"{{ .Module }}/models"
	"{{ .Module }}/repository"
)

type {{ .Name }}Service interface {
	List(ctx context.Context, limit, offset int) ([]models.{{ .Name }}, error)
	Get(ctx context.Context, id int) (*models.{{ .Name }}, error)
	Create(ctx context.Context, req {{ .VarName }}.Create{{ .Name }}Request) error
	Update(ctx context.Context, id int, req {{ .VarName }}.Update{{ .Name }}Request) error
	Delete(ctx context.Context, id int) error
	Count(ctx context.Context) (int, error)
}

type {{ .VarName }}Service struct {
	repo *repository.{{ .Name }}Repository
}

func New{{ .Name }}Service(repo *repository.{{ .Name }}Repository) {{ .Name }}Service {
	return &{{ .VarName }}Service{repo: repo}
}

func (s *{{ .VarName }}Service) List(ctx context.Context, limit, offset int) ([]models.{{ .Name }}, error) {
	return s.repo.List(ctx, limit, offset)
}

func (s *{{ .VarName }}Service) Get(ctx context.Context, id int) (*models.{{ .Name }}, error) {
	return s.repo.Get(ctx, id)
}

func (s *{{ .VarName }}Service) Create(ctx context.Context, req {{ .VarName }}.Create{{ .Name }}Request) error {
	item := &models.{{ .Name }}{
		// TODO: маппинг req -> модель
		// Example fields based on your Log model:
		// Title:   req.Title,
		// Content: req.Content,
		// UserId:  req.UserId,
	}
	return s.repo.Create(ctx, item)
}

func (s *{{ .VarName }}Service) Update(ctx context.Context, id int, req {{ .VarName }}.Update{{ .Name }}Request) error {
	// Create update map based on request
	updates := make(map[string]interface{})
	
	// TODO: Add field mappings from req to updates map
	// Example:
	// if req.Title != "" {
	//     updates["title"] = req.Title
	// }
	// if req.Content != "" {
	//     updates["content"] = req.Content
	// }
	// if req.UserId != 0 {
	//     updates["user_id"] = req.UserId
	// }
	
	return s.repo.Update(ctx, id, updates)
}

func (s *{{ .VarName }}Service) Delete(ctx context.Context, id int) error {
	return s.repo.Delete(ctx, id)
}

func (s *{{ .VarName }}Service) Count(ctx context.Context) (int, error) {
	return s.repo.Count(ctx)
}